{"ast":null,"code":"const resolvePaths = require('./utils/resolvePaths');\nconst circularize = require('./utils/circularize');\nconst createJob = require('./createJob');\nconst {\n  log\n} = require('./utils/log');\nconst getId = require('./utils/getId');\nconst {\n  defaultOEM\n} = require('./constants/config');\nconst {\n  defaultOptions,\n  spawnWorker,\n  terminateWorker,\n  onMessage,\n  loadImage,\n  send\n} = require('./worker/node');\nlet workerCounter = 0;\nmodule.exports = (_options = {}) => {\n  const id = getId('Worker', workerCounter);\n  const {\n    logger,\n    errorHandler,\n    ...options\n  } = resolvePaths({\n    ...defaultOptions,\n    ..._options\n  });\n  const resolves = {};\n  const rejects = {};\n  let worker = spawnWorker(options);\n  workerCounter += 1;\n  const setResolve = (action, res) => {\n    resolves[action] = res;\n  };\n  const setReject = (action, rej) => {\n    rejects[action] = rej;\n  };\n  const startJob = ({\n    id: jobId,\n    action,\n    payload\n  }) => new Promise((resolve, reject) => {\n    log(`[${id}]: Start ${jobId}, action=${action}`);\n    setResolve(action, resolve);\n    setReject(action, reject);\n    send(worker, {\n      workerId: id,\n      jobId,\n      action,\n      payload\n    });\n  });\n  const load = jobId => startJob(createJob({\n    id: jobId,\n    action: 'load',\n    payload: {\n      options\n    }\n  }));\n  const writeText = (path, text, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'FS',\n    payload: {\n      method: 'writeFile',\n      args: [path, text]\n    }\n  }));\n  const readText = (path, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'FS',\n    payload: {\n      method: 'readFile',\n      args: [path, {\n        encoding: 'utf8'\n      }]\n    }\n  }));\n  const removeFile = (path, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'FS',\n    payload: {\n      method: 'unlink',\n      args: [path]\n    }\n  }));\n  const FS = (method, args, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'FS',\n    payload: {\n      method,\n      args\n    }\n  }));\n  const loadLanguage = (langs = 'eng', jobId) => startJob(createJob({\n    id: jobId,\n    action: 'loadLanguage',\n    payload: {\n      langs,\n      options\n    }\n  }));\n  const initialize = (langs = 'eng', oem = defaultOEM, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'initialize',\n    payload: {\n      langs,\n      oem\n    }\n  }));\n  const setParameters = (params = {}, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'setParameters',\n    payload: {\n      params\n    }\n  }));\n  const recognize = async (image, opts = {}, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'recognize',\n    payload: {\n      image: await loadImage(image),\n      options: opts\n    }\n  }));\n  const getPDF = (title = 'Tesseract OCR Result', textonly = false, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'getPDF',\n    payload: {\n      title,\n      textonly\n    }\n  }));\n  const detect = async (image, jobId) => startJob(createJob({\n    id: jobId,\n    action: 'detect',\n    payload: {\n      image: await loadImage(image)\n    }\n  }));\n  const terminate = async () => {\n    if (worker !== null) {\n      /*\n      await startJob(createJob({\n        id: jobId,\n        action: 'terminate',\n      }));\n      */\n      terminateWorker(worker);\n      worker = null;\n    }\n    return Promise.resolve();\n  };\n  onMessage(worker, ({\n    workerId,\n    jobId,\n    status,\n    action,\n    data\n  }) => {\n    if (status === 'resolve') {\n      log(`[${workerId}]: Complete ${jobId}`);\n      let d = data;\n      if (action === 'recognize') {\n        d = circularize(data);\n      } else if (action === 'getPDF') {\n        d = Array.from({\n          ...data,\n          length: Object.keys(data).length\n        });\n      }\n      resolves[action]({\n        jobId,\n        data: d\n      });\n    } else if (status === 'reject') {\n      rejects[action](data);\n      if (errorHandler) {\n        errorHandler(data);\n      } else {\n        throw Error(data);\n      }\n    } else if (status === 'progress') {\n      logger({\n        ...data,\n        userJobId: jobId\n      });\n    }\n  });\n  return {\n    id,\n    worker,\n    setResolve,\n    setReject,\n    load,\n    writeText,\n    readText,\n    removeFile,\n    FS,\n    loadLanguage,\n    initialize,\n    setParameters,\n    recognize,\n    getPDF,\n    detect,\n    terminate\n  };\n};","map":{"version":3,"names":["resolvePaths","require","circularize","createJob","log","getId","defaultOEM","defaultOptions","spawnWorker","terminateWorker","onMessage","loadImage","send","workerCounter","module","exports","_options","id","logger","errorHandler","options","resolves","rejects","worker","setResolve","action","res","setReject","rej","startJob","jobId","payload","Promise","resolve","reject","workerId","load","writeText","path","text","method","args","readText","encoding","removeFile","FS","loadLanguage","langs","initialize","oem","setParameters","params","recognize","image","opts","getPDF","title","textonly","detect","terminate","status","data","d","Array","from","length","Object","keys","Error","userJobId"],"sources":["/Users/mac/Downloads/ai-math-helper-complete/node_modules/tesseract.js/src/createWorker.js"],"sourcesContent":["const resolvePaths = require('./utils/resolvePaths');\nconst circularize = require('./utils/circularize');\nconst createJob = require('./createJob');\nconst { log } = require('./utils/log');\nconst getId = require('./utils/getId');\nconst { defaultOEM } = require('./constants/config');\nconst {\n  defaultOptions,\n  spawnWorker,\n  terminateWorker,\n  onMessage,\n  loadImage,\n  send,\n} = require('./worker/node');\n\nlet workerCounter = 0;\n\nmodule.exports = (_options = {}) => {\n  const id = getId('Worker', workerCounter);\n  const {\n    logger,\n    errorHandler,\n    ...options\n  } = resolvePaths({\n    ...defaultOptions,\n    ..._options,\n  });\n  const resolves = {};\n  const rejects = {};\n  let worker = spawnWorker(options);\n\n  workerCounter += 1;\n\n  const setResolve = (action, res) => {\n    resolves[action] = res;\n  };\n\n  const setReject = (action, rej) => {\n    rejects[action] = rej;\n  };\n\n  const startJob = ({ id: jobId, action, payload }) => (\n    new Promise((resolve, reject) => {\n      log(`[${id}]: Start ${jobId}, action=${action}`);\n      setResolve(action, resolve);\n      setReject(action, reject);\n      send(worker, {\n        workerId: id,\n        jobId,\n        action,\n        payload,\n      });\n    })\n  );\n\n  const load = (jobId) => (\n    startJob(createJob({\n      id: jobId, action: 'load', payload: { options },\n    }))\n  );\n\n  const writeText = (path, text, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'writeFile', args: [path, text] },\n    }))\n  );\n\n  const readText = (path, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'readFile', args: [path, { encoding: 'utf8' }] },\n    }))\n  );\n\n  const removeFile = (path, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'unlink', args: [path] },\n    }))\n  );\n\n  const FS = (method, args, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method, args },\n    }))\n  );\n\n  const loadLanguage = (langs = 'eng', jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'loadLanguage',\n      payload: { langs, options },\n    }))\n  );\n\n  const initialize = (langs = 'eng', oem = defaultOEM, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'initialize',\n      payload: { langs, oem },\n    }))\n  );\n\n  const setParameters = (params = {}, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'setParameters',\n      payload: { params },\n    }))\n  );\n\n  const recognize = async (image, opts = {}, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'recognize',\n      payload: { image: await loadImage(image), options: opts },\n    }))\n  );\n\n  const getPDF = (title = 'Tesseract OCR Result', textonly = false, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'getPDF',\n      payload: { title, textonly },\n    }))\n  );\n\n  const detect = async (image, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'detect',\n      payload: { image: await loadImage(image) },\n    }))\n  );\n\n  const terminate = async () => {\n    if (worker !== null) {\n      /*\n      await startJob(createJob({\n        id: jobId,\n        action: 'terminate',\n      }));\n      */\n      terminateWorker(worker);\n      worker = null;\n    }\n    return Promise.resolve();\n  };\n\n  onMessage(worker, ({\n    workerId, jobId, status, action, data,\n  }) => {\n    if (status === 'resolve') {\n      log(`[${workerId}]: Complete ${jobId}`);\n      let d = data;\n      if (action === 'recognize') {\n        d = circularize(data);\n      } else if (action === 'getPDF') {\n        d = Array.from({ ...data, length: Object.keys(data).length });\n      }\n      resolves[action]({ jobId, data: d });\n    } else if (status === 'reject') {\n      rejects[action](data);\n      if (errorHandler) {\n        errorHandler(data);\n      } else {\n        throw Error(data);\n      }\n    } else if (status === 'progress') {\n      logger({ ...data, userJobId: jobId });\n    }\n  });\n\n  return {\n    id,\n    worker,\n    setResolve,\n    setReject,\n    load,\n    writeText,\n    readText,\n    removeFile,\n    FS,\n    loadLanguage,\n    initialize,\n    setParameters,\n    recognize,\n    getPDF,\n    detect,\n    terminate,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}