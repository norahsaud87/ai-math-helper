{"ast":null,"code":"/*\n * JavaScript Load Image IPTC Parser\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2013, Sebastian Tschan\n * Copyright 2018, Dave Bevan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, module, require, DataView */\n\n;\n(function (factory) {\n  'use strict';\n\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define(['./load-image', './load-image-meta'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./load-image'), require('./load-image-meta'));\n  } else {\n    // Browser globals:\n    factory(window.loadImage);\n  }\n})(function (loadImage) {\n  'use strict';\n\n  /**\n   * IPTC tag map\n   *\n   * @name IptcMap\n   * @class\n   */\n  function IptcMap() {}\n  IptcMap.prototype.map = {\n    ObjectName: 5\n  };\n  IptcMap.prototype.types = {\n    0: 'Uint16',\n    // ApplicationRecordVersion\n    200: 'Uint16',\n    // ObjectPreviewFileFormat\n    201: 'Uint16',\n    // ObjectPreviewFileVersion\n    202: 'binary' // ObjectPreviewData\n  };\n\n  /**\n   * Retrieves IPTC tag value\n   *\n   * @param {number|string} id IPTC tag code or name\n   * @returns {object} IPTC tag value\n   */\n  IptcMap.prototype.get = function (id) {\n    return this[id] || this[this.map[id]];\n  };\n\n  /**\n   * Retrieves string for the given DataView and range\n   *\n   * @param {DataView} dataView Data view interface\n   * @param {number} offset Offset start\n   * @param {number} length Offset length\n   * @returns {string} String value\n   */\n  function getStringValue(dataView, offset, length) {\n    var outstr = '';\n    var end = offset + length;\n    for (var n = offset; n < end; n += 1) {\n      outstr += String.fromCharCode(dataView.getUint8(n));\n    }\n    return outstr;\n  }\n\n  /**\n   * Retrieves tag value for the given DataView and range\n   *\n   * @param {number} tagCode Private IFD tag code\n   * @param {IptcMap} map IPTC tag map\n   * @param {DataView} dataView Data view interface\n   * @param {number} offset Range start\n   * @param {number} length Range length\n   * @returns {object} Tag value\n   */\n  function getTagValue(tagCode, map, dataView, offset, length) {\n    if (map.types[tagCode] === 'binary') {\n      return new Blob([dataView.buffer.slice(offset, offset + length)]);\n    }\n    if (map.types[tagCode] === 'Uint16') {\n      return dataView.getUint16(offset);\n    }\n    return getStringValue(dataView, offset, length);\n  }\n\n  /**\n   * Combines IPTC value with existing ones.\n   *\n   * @param {object} value Existing IPTC field value\n   * @param {object} newValue New IPTC field value\n   * @returns {object} Resulting IPTC field value\n   */\n  function combineTagValues(value, newValue) {\n    if (value === undefined) return newValue;\n    if (value instanceof Array) {\n      value.push(newValue);\n      return value;\n    }\n    return [value, newValue];\n  }\n\n  /**\n   * Parses IPTC tags.\n   *\n   * @param {DataView} dataView Data view interface\n   * @param {number} segmentOffset Segment offset\n   * @param {number} segmentLength Segment length\n   * @param {object} data Data export object\n   * @param {object} includeTags Map of tags to include\n   * @param {object} excludeTags Map of tags to exclude\n   */\n  function parseIptcTags(dataView, segmentOffset, segmentLength, data, includeTags, excludeTags) {\n    var value, tagSize, tagCode;\n    var segmentEnd = segmentOffset + segmentLength;\n    var offset = segmentOffset;\n    while (offset < segmentEnd) {\n      if (dataView.getUint8(offset) === 0x1c &&\n      // tag marker\n      dataView.getUint8(offset + 1) === 0x02 // record number, only handles v2\n      ) {\n        tagCode = dataView.getUint8(offset + 2);\n        if ((!includeTags || includeTags[tagCode]) && (!excludeTags || !excludeTags[tagCode])) {\n          tagSize = dataView.getInt16(offset + 3);\n          value = getTagValue(tagCode, data.iptc, dataView, offset + 5, tagSize);\n          data.iptc[tagCode] = combineTagValues(data.iptc[tagCode], value);\n          if (data.iptcOffsets) {\n            data.iptcOffsets[tagCode] = offset;\n          }\n        }\n      }\n      offset += 1;\n    }\n  }\n\n  /**\n   * Tests if field segment starts at offset.\n   *\n   * @param {DataView} dataView Data view interface\n   * @param {number} offset Segment offset\n   * @returns {boolean} True if '8BIM<EOT><EOT>' exists at offset\n   */\n  function isSegmentStart(dataView, offset) {\n    return dataView.getUint32(offset) === 0x3842494d &&\n    // Photoshop segment start\n    dataView.getUint16(offset + 4) === 0x0404 // IPTC segment start\n    ;\n  }\n\n  /**\n   * Returns header length.\n   *\n   * @param {DataView} dataView Data view interface\n   * @param {number} offset Segment offset\n   * @returns {number} Header length\n   */\n  function getHeaderLength(dataView, offset) {\n    var length = dataView.getUint8(offset + 7);\n    if (length % 2 !== 0) length += 1;\n    // Check for pre photoshop 6 format\n    if (length === 0) {\n      // Always 4\n      length = 4;\n    }\n    return length;\n  }\n  loadImage.parseIptcData = function (dataView, offset, length, data, options) {\n    if (options.disableIptc) {\n      return;\n    }\n    var markerLength = offset + length;\n    while (offset + 8 < markerLength) {\n      if (isSegmentStart(dataView, offset)) {\n        var headerLength = getHeaderLength(dataView, offset);\n        var segmentOffset = offset + 8 + headerLength;\n        if (segmentOffset > markerLength) {\n          // eslint-disable-next-line no-console\n          console.log('Invalid IPTC data: Invalid segment offset.');\n          break;\n        }\n        var segmentLength = dataView.getUint16(offset + 6 + headerLength);\n        if (offset + segmentLength > markerLength) {\n          // eslint-disable-next-line no-console\n          console.log('Invalid IPTC data: Invalid segment size.');\n          break;\n        }\n        // Create the iptc object to store the tags:\n        data.iptc = new IptcMap();\n        if (!options.disableIptcOffsets) {\n          data.iptcOffsets = new IptcMap();\n        }\n        parseIptcTags(dataView, segmentOffset, segmentLength, data, options.includeIptcTags, options.excludeIptcTags || {\n          202: true\n        } // ObjectPreviewData\n        );\n        return;\n      }\n      // eslint-disable-next-line no-param-reassign\n      offset += 1;\n    }\n  };\n\n  // Registers this IPTC parser for the APP13 JPEG meta data segment:\n  loadImage.metaDataParsers.jpeg[0xffed].push(loadImage.parseIptcData);\n  loadImage.IptcMap = IptcMap;\n\n  // Adds the following properties to the parseMetaData callback data:\n  // - iptc: The iptc tags, parsed by the parseIptcData method\n\n  // Adds the following options to the parseMetaData method:\n  // - disableIptc: Disables IPTC parsing when true.\n  // - disableIptcOffsets: Disables storing IPTC tag offsets when true.\n  // - includeIptcTags: A map of IPTC tags to include for parsing.\n  // - excludeIptcTags: A map of IPTC tags to exclude from parsing.\n});","map":{"version":3,"names":["factory","define","amd","module","exports","require","window","loadImage","IptcMap","prototype","map","ObjectName","types","get","id","getStringValue","dataView","offset","length","outstr","end","n","String","fromCharCode","getUint8","getTagValue","tagCode","Blob","buffer","slice","getUint16","combineTagValues","value","newValue","undefined","Array","push","parseIptcTags","segmentOffset","segmentLength","data","includeTags","excludeTags","tagSize","segmentEnd","getInt16","iptc","iptcOffsets","isSegmentStart","getUint32","getHeaderLength","parseIptcData","options","disableIptc","markerLength","headerLength","console","log","disableIptcOffsets","includeIptcTags","excludeIptcTags","metaDataParsers","jpeg"],"sources":["/Users/mac/Downloads/ai-math-helper-complete/node_modules/blueimp-load-image/js/load-image-iptc.js"],"sourcesContent":["/*\n * JavaScript Load Image IPTC Parser\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2013, Sebastian Tschan\n * Copyright 2018, Dave Bevan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, module, require, DataView */\n\n;(function (factory) {\n  'use strict'\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define(['./load-image', './load-image-meta'], factory)\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./load-image'), require('./load-image-meta'))\n  } else {\n    // Browser globals:\n    factory(window.loadImage)\n  }\n})(function (loadImage) {\n  'use strict'\n\n  /**\n   * IPTC tag map\n   *\n   * @name IptcMap\n   * @class\n   */\n  function IptcMap() {}\n\n  IptcMap.prototype.map = {\n    ObjectName: 5\n  }\n\n  IptcMap.prototype.types = {\n    0: 'Uint16', // ApplicationRecordVersion\n    200: 'Uint16', // ObjectPreviewFileFormat\n    201: 'Uint16', // ObjectPreviewFileVersion\n    202: 'binary' // ObjectPreviewData\n  }\n\n  /**\n   * Retrieves IPTC tag value\n   *\n   * @param {number|string} id IPTC tag code or name\n   * @returns {object} IPTC tag value\n   */\n  IptcMap.prototype.get = function (id) {\n    return this[id] || this[this.map[id]]\n  }\n\n  /**\n   * Retrieves string for the given DataView and range\n   *\n   * @param {DataView} dataView Data view interface\n   * @param {number} offset Offset start\n   * @param {number} length Offset length\n   * @returns {string} String value\n   */\n  function getStringValue(dataView, offset, length) {\n    var outstr = ''\n    var end = offset + length\n    for (var n = offset; n < end; n += 1) {\n      outstr += String.fromCharCode(dataView.getUint8(n))\n    }\n    return outstr\n  }\n\n  /**\n   * Retrieves tag value for the given DataView and range\n   *\n   * @param {number} tagCode Private IFD tag code\n   * @param {IptcMap} map IPTC tag map\n   * @param {DataView} dataView Data view interface\n   * @param {number} offset Range start\n   * @param {number} length Range length\n   * @returns {object} Tag value\n   */\n  function getTagValue(tagCode, map, dataView, offset, length) {\n    if (map.types[tagCode] === 'binary') {\n      return new Blob([dataView.buffer.slice(offset, offset + length)])\n    }\n    if (map.types[tagCode] === 'Uint16') {\n      return dataView.getUint16(offset)\n    }\n    return getStringValue(dataView, offset, length)\n  }\n\n  /**\n   * Combines IPTC value with existing ones.\n   *\n   * @param {object} value Existing IPTC field value\n   * @param {object} newValue New IPTC field value\n   * @returns {object} Resulting IPTC field value\n   */\n  function combineTagValues(value, newValue) {\n    if (value === undefined) return newValue\n    if (value instanceof Array) {\n      value.push(newValue)\n      return value\n    }\n    return [value, newValue]\n  }\n\n  /**\n   * Parses IPTC tags.\n   *\n   * @param {DataView} dataView Data view interface\n   * @param {number} segmentOffset Segment offset\n   * @param {number} segmentLength Segment length\n   * @param {object} data Data export object\n   * @param {object} includeTags Map of tags to include\n   * @param {object} excludeTags Map of tags to exclude\n   */\n  function parseIptcTags(\n    dataView,\n    segmentOffset,\n    segmentLength,\n    data,\n    includeTags,\n    excludeTags\n  ) {\n    var value, tagSize, tagCode\n    var segmentEnd = segmentOffset + segmentLength\n    var offset = segmentOffset\n    while (offset < segmentEnd) {\n      if (\n        dataView.getUint8(offset) === 0x1c && // tag marker\n        dataView.getUint8(offset + 1) === 0x02 // record number, only handles v2\n      ) {\n        tagCode = dataView.getUint8(offset + 2)\n        if (\n          (!includeTags || includeTags[tagCode]) &&\n          (!excludeTags || !excludeTags[tagCode])\n        ) {\n          tagSize = dataView.getInt16(offset + 3)\n          value = getTagValue(tagCode, data.iptc, dataView, offset + 5, tagSize)\n          data.iptc[tagCode] = combineTagValues(data.iptc[tagCode], value)\n          if (data.iptcOffsets) {\n            data.iptcOffsets[tagCode] = offset\n          }\n        }\n      }\n      offset += 1\n    }\n  }\n\n  /**\n   * Tests if field segment starts at offset.\n   *\n   * @param {DataView} dataView Data view interface\n   * @param {number} offset Segment offset\n   * @returns {boolean} True if '8BIM<EOT><EOT>' exists at offset\n   */\n  function isSegmentStart(dataView, offset) {\n    return (\n      dataView.getUint32(offset) === 0x3842494d && // Photoshop segment start\n      dataView.getUint16(offset + 4) === 0x0404 // IPTC segment start\n    )\n  }\n\n  /**\n   * Returns header length.\n   *\n   * @param {DataView} dataView Data view interface\n   * @param {number} offset Segment offset\n   * @returns {number} Header length\n   */\n  function getHeaderLength(dataView, offset) {\n    var length = dataView.getUint8(offset + 7)\n    if (length % 2 !== 0) length += 1\n    // Check for pre photoshop 6 format\n    if (length === 0) {\n      // Always 4\n      length = 4\n    }\n    return length\n  }\n\n  loadImage.parseIptcData = function (dataView, offset, length, data, options) {\n    if (options.disableIptc) {\n      return\n    }\n    var markerLength = offset + length\n    while (offset + 8 < markerLength) {\n      if (isSegmentStart(dataView, offset)) {\n        var headerLength = getHeaderLength(dataView, offset)\n        var segmentOffset = offset + 8 + headerLength\n        if (segmentOffset > markerLength) {\n          // eslint-disable-next-line no-console\n          console.log('Invalid IPTC data: Invalid segment offset.')\n          break\n        }\n        var segmentLength = dataView.getUint16(offset + 6 + headerLength)\n        if (offset + segmentLength > markerLength) {\n          // eslint-disable-next-line no-console\n          console.log('Invalid IPTC data: Invalid segment size.')\n          break\n        }\n        // Create the iptc object to store the tags:\n        data.iptc = new IptcMap()\n        if (!options.disableIptcOffsets) {\n          data.iptcOffsets = new IptcMap()\n        }\n        parseIptcTags(\n          dataView,\n          segmentOffset,\n          segmentLength,\n          data,\n          options.includeIptcTags,\n          options.excludeIptcTags || { 202: true } // ObjectPreviewData\n        )\n        return\n      }\n      // eslint-disable-next-line no-param-reassign\n      offset += 1\n    }\n  }\n\n  // Registers this IPTC parser for the APP13 JPEG meta data segment:\n  loadImage.metaDataParsers.jpeg[0xffed].push(loadImage.parseIptcData)\n\n  loadImage.IptcMap = IptcMap\n\n  // Adds the following properties to the parseMetaData callback data:\n  // - iptc: The iptc tags, parsed by the parseIptcData method\n\n  // Adds the following options to the parseMetaData method:\n  // - disableIptc: Disables IPTC parsing when true.\n  // - disableIptcOffsets: Disables storing IPTC tag offsets when true.\n  // - includeIptcTags: A map of IPTC tags to include for parsing.\n  // - excludeIptcTags: A map of IPTC tags to exclude from parsing.\n})\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}