{"ast":null,"code":"/*\n * JavaScript Load Image Fetch\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2017, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, module, require */\n\n;\n(function (factory) {\n  'use strict';\n\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define(['./load-image'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./load-image'));\n  } else {\n    // Browser globals:\n    factory(window.loadImage);\n  }\n})(function (loadImage) {\n  'use strict';\n\n  if (typeof fetch !== 'undefined' && typeof Request !== 'undefined') {\n    loadImage.fetchBlob = function (url, callback, options) {\n      fetch(new Request(url, options)).then(function (response) {\n        return response.blob();\n      }).then(callback).catch(function (err) {\n        callback(null, err);\n      });\n    };\n  } else if (\n  // Check for XHR2 support:\n  typeof XMLHttpRequest !== 'undefined' && typeof ProgressEvent !== 'undefined') {\n    loadImage.fetchBlob = function (url, callback, options) {\n      // eslint-disable-next-line no-param-reassign\n      options = options || {};\n      var req = new XMLHttpRequest();\n      req.open(options.method || 'GET', url);\n      if (options.headers) {\n        Object.keys(options.headers).forEach(function (key) {\n          req.setRequestHeader(key, options.headers[key]);\n        });\n      }\n      req.withCredentials = options.credentials === 'include';\n      req.responseType = 'blob';\n      req.onload = function () {\n        callback(req.response);\n      };\n      req.onerror = req.onabort = req.ontimeout = function (err) {\n        callback(null, err);\n      };\n      req.send(options.body);\n    };\n  }\n});","map":{"version":3,"names":["factory","define","amd","module","exports","require","window","loadImage","fetch","Request","fetchBlob","url","callback","options","then","response","blob","catch","err","XMLHttpRequest","ProgressEvent","req","open","method","headers","Object","keys","forEach","key","setRequestHeader","withCredentials","credentials","responseType","onload","onerror","onabort","ontimeout","send","body"],"sources":["/Users/mac/Downloads/ai-math-helper-complete/node_modules/blueimp-load-image/js/load-image-fetch.js"],"sourcesContent":["/*\n * JavaScript Load Image Fetch\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2017, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, module, require */\n\n;(function (factory) {\n  'use strict'\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define(['./load-image'], factory)\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./load-image'))\n  } else {\n    // Browser globals:\n    factory(window.loadImage)\n  }\n})(function (loadImage) {\n  'use strict'\n\n  if (typeof fetch !== 'undefined' && typeof Request !== 'undefined') {\n    loadImage.fetchBlob = function (url, callback, options) {\n      fetch(new Request(url, options))\n        .then(function (response) {\n          return response.blob()\n        })\n        .then(callback)\n        .catch(function (err) {\n          callback(null, err)\n        })\n    }\n  } else if (\n    // Check for XHR2 support:\n    typeof XMLHttpRequest !== 'undefined' &&\n    typeof ProgressEvent !== 'undefined'\n  ) {\n    loadImage.fetchBlob = function (url, callback, options) {\n      // eslint-disable-next-line no-param-reassign\n      options = options || {}\n      var req = new XMLHttpRequest()\n      req.open(options.method || 'GET', url)\n      if (options.headers) {\n        Object.keys(options.headers).forEach(function (key) {\n          req.setRequestHeader(key, options.headers[key])\n        })\n      }\n      req.withCredentials = options.credentials === 'include'\n      req.responseType = 'blob'\n      req.onload = function () {\n        callback(req.response)\n      }\n      req.onerror = req.onabort = req.ontimeout = function (err) {\n        callback(null, err)\n      }\n      req.send(options.body)\n    }\n  }\n})\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AAAC,CAAC,UAAUA,OAAO,EAAE;EACnB,YAAY;;EACZ,IAAI,OAAOC,MAAM,KAAK,UAAU,IAAIA,MAAM,CAACC,GAAG,EAAE;IAC9C;IACAD,MAAM,CAAC,CAAC,cAAc,CAAC,EAAED,OAAO,CAAC;EACnC,CAAC,MAAM,IAAI,OAAOG,MAAM,KAAK,QAAQ,IAAIA,MAAM,CAACC,OAAO,EAAE;IACvDJ,OAAO,CAACK,OAAO,CAAC,cAAc,CAAC,CAAC;EAClC,CAAC,MAAM;IACL;IACAL,OAAO,CAACM,MAAM,CAACC,SAAS,CAAC;EAC3B;AACF,CAAC,EAAE,UAAUA,SAAS,EAAE;EACtB,YAAY;;EAEZ,IAAI,OAAOC,KAAK,KAAK,WAAW,IAAI,OAAOC,OAAO,KAAK,WAAW,EAAE;IAClEF,SAAS,CAACG,SAAS,GAAG,UAAUC,GAAG,EAAEC,QAAQ,EAAEC,OAAO,EAAE;MACtDL,KAAK,CAAC,IAAIC,OAAO,CAACE,GAAG,EAAEE,OAAO,CAAC,CAAC,CAC7BC,IAAI,CAAC,UAAUC,QAAQ,EAAE;QACxB,OAAOA,QAAQ,CAACC,IAAI,CAAC,CAAC;MACxB,CAAC,CAAC,CACDF,IAAI,CAACF,QAAQ,CAAC,CACdK,KAAK,CAAC,UAAUC,GAAG,EAAE;QACpBN,QAAQ,CAAC,IAAI,EAAEM,GAAG,CAAC;MACrB,CAAC,CAAC;IACN,CAAC;EACH,CAAC,MAAM;EACL;EACA,OAAOC,cAAc,KAAK,WAAW,IACrC,OAAOC,aAAa,KAAK,WAAW,EACpC;IACAb,SAAS,CAACG,SAAS,GAAG,UAAUC,GAAG,EAAEC,QAAQ,EAAEC,OAAO,EAAE;MACtD;MACAA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;MACvB,IAAIQ,GAAG,GAAG,IAAIF,cAAc,CAAC,CAAC;MAC9BE,GAAG,CAACC,IAAI,CAACT,OAAO,CAACU,MAAM,IAAI,KAAK,EAAEZ,GAAG,CAAC;MACtC,IAAIE,OAAO,CAACW,OAAO,EAAE;QACnBC,MAAM,CAACC,IAAI,CAACb,OAAO,CAACW,OAAO,CAAC,CAACG,OAAO,CAAC,UAAUC,GAAG,EAAE;UAClDP,GAAG,CAACQ,gBAAgB,CAACD,GAAG,EAAEf,OAAO,CAACW,OAAO,CAACI,GAAG,CAAC,CAAC;QACjD,CAAC,CAAC;MACJ;MACAP,GAAG,CAACS,eAAe,GAAGjB,OAAO,CAACkB,WAAW,KAAK,SAAS;MACvDV,GAAG,CAACW,YAAY,GAAG,MAAM;MACzBX,GAAG,CAACY,MAAM,GAAG,YAAY;QACvBrB,QAAQ,CAACS,GAAG,CAACN,QAAQ,CAAC;MACxB,CAAC;MACDM,GAAG,CAACa,OAAO,GAAGb,GAAG,CAACc,OAAO,GAAGd,GAAG,CAACe,SAAS,GAAG,UAAUlB,GAAG,EAAE;QACzDN,QAAQ,CAAC,IAAI,EAAEM,GAAG,CAAC;MACrB,CAAC;MACDG,GAAG,CAACgB,IAAI,CAACxB,OAAO,CAACyB,IAAI,CAAC;IACxB,CAAC;EACH;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}