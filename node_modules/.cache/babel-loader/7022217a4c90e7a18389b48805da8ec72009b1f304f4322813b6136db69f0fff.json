{"ast":null,"code":"/*\n * JavaScript Load Image Exif Parser\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2013, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, module, require, DataView */\n\n/* eslint-disable no-console */\n\n;\n(function (factory) {\n  'use strict';\n\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define(['./load-image', './load-image-meta'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./load-image'), require('./load-image-meta'));\n  } else {\n    // Browser globals:\n    factory(window.loadImage);\n  }\n})(function (loadImage) {\n  'use strict';\n\n  /**\n   * Exif tag map\n   *\n   * @name ExifMap\n   * @class\n   * @param {number} tagCode Private IFD tag code\n   */\n  function ExifMap(tagCode) {\n    if (tagCode) {\n      Object.defineProperty(this, 'map', {\n        value: this.privateIFDs[tagCode].map\n      });\n      Object.defineProperty(this, 'tags', {\n        value: this.tags && this.tags[tagCode] || {}\n      });\n    }\n  }\n  ExifMap.prototype.map = {\n    Orientation: 0x0112,\n    Thumbnail: 0x0201,\n    Exif: 0x8769,\n    GPSInfo: 0x8825,\n    Interoperability: 0xa005\n  };\n  ExifMap.prototype.privateIFDs = {\n    0x8769: {\n      name: 'Exif',\n      map: {}\n    },\n    0x8825: {\n      name: 'GPSInfo',\n      map: {}\n    },\n    0xa005: {\n      name: 'Interoperability',\n      map: {}\n    }\n  };\n\n  /**\n   * Retrieves exif tag value\n   *\n   * @param {number|string} id Exif tag code or name\n   * @returns {object} Exif tag value\n   */\n  ExifMap.prototype.get = function (id) {\n    return this[id] || this[this.map[id]];\n  };\n\n  /**\n   * Returns the Exif Thumbnail data as Blob.\n   *\n   * @param {DataView} dataView Data view interface\n   * @param {number} offset Thumbnail data offset\n   * @param {number} length Thumbnail data length\n   * @returns {undefined|Blob} Returns the Thumbnail Blob or undefined\n   */\n  function getExifThumbnail(dataView, offset, length) {\n    if (!length || offset + length > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid thumbnail data.');\n      return;\n    }\n    return new Blob([dataView.buffer.slice(offset, offset + length)], {\n      type: 'image/jpeg'\n    });\n  }\n  var ExifTagTypes = {\n    // byte, 8-bit unsigned int:\n    1: {\n      getValue: function (dataView, dataOffset) {\n        return dataView.getUint8(dataOffset);\n      },\n      size: 1\n    },\n    // ascii, 8-bit byte:\n    2: {\n      getValue: function (dataView, dataOffset) {\n        return String.fromCharCode(dataView.getUint8(dataOffset));\n      },\n      size: 1,\n      ascii: true\n    },\n    // short, 16 bit int:\n    3: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return dataView.getUint16(dataOffset, littleEndian);\n      },\n      size: 2\n    },\n    // long, 32 bit int:\n    4: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return dataView.getUint32(dataOffset, littleEndian);\n      },\n      size: 4\n    },\n    // rational = two long values, first is numerator, second is denominator:\n    5: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return dataView.getUint32(dataOffset, littleEndian) / dataView.getUint32(dataOffset + 4, littleEndian);\n      },\n      size: 8\n    },\n    // slong, 32 bit signed int:\n    9: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return dataView.getInt32(dataOffset, littleEndian);\n      },\n      size: 4\n    },\n    // srational, two slongs, first is numerator, second is denominator:\n    10: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return dataView.getInt32(dataOffset, littleEndian) / dataView.getInt32(dataOffset + 4, littleEndian);\n      },\n      size: 8\n    }\n  };\n  // undefined, 8-bit byte, value depending on field:\n  ExifTagTypes[7] = ExifTagTypes[1];\n\n  /**\n   * Returns Exif tag value.\n   *\n   * @param {DataView} dataView Data view interface\n   * @param {number} tiffOffset TIFF offset\n   * @param {number} offset Tag offset\n   * @param {number} type Tag type\n   * @param {number} length Tag length\n   * @param {boolean} littleEndian Little endian encoding\n   * @returns {object} Tag value\n   */\n  function getExifValue(dataView, tiffOffset, offset, type, length, littleEndian) {\n    var tagType = ExifTagTypes[type];\n    var tagSize;\n    var dataOffset;\n    var values;\n    var i;\n    var str;\n    var c;\n    if (!tagType) {\n      console.log('Invalid Exif data: Invalid tag type.');\n      return;\n    }\n    tagSize = tagType.size * length;\n    // Determine if the value is contained in the dataOffset bytes,\n    // or if the value at the dataOffset is a pointer to the actual data:\n    dataOffset = tagSize > 4 ? tiffOffset + dataView.getUint32(offset + 8, littleEndian) : offset + 8;\n    if (dataOffset + tagSize > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid data offset.');\n      return;\n    }\n    if (length === 1) {\n      return tagType.getValue(dataView, dataOffset, littleEndian);\n    }\n    values = [];\n    for (i = 0; i < length; i += 1) {\n      values[i] = tagType.getValue(dataView, dataOffset + i * tagType.size, littleEndian);\n    }\n    if (tagType.ascii) {\n      str = '';\n      // Concatenate the chars:\n      for (i = 0; i < values.length; i += 1) {\n        c = values[i];\n        // Ignore the terminating NULL byte(s):\n        if (c === '\\u0000') {\n          break;\n        }\n        str += c;\n      }\n      return str;\n    }\n    return values;\n  }\n\n  /**\n   * Parses Exif tags.\n   *\n   * @param {DataView} dataView Data view interface\n   * @param {number} tiffOffset TIFF offset\n   * @param {number} dirOffset Directory offset\n   * @param {boolean} littleEndian Little endian encoding\n   * @param {ExifMap} tags Map to store parsed exif tags\n   * @param {ExifMap} tagOffsets Map to store parsed exif tag offsets\n   * @param {object} includeTags Map of tags to include\n   * @param {object} excludeTags Map of tags to exclude\n   * @returns {number} Next directory offset\n   */\n  function parseExifTags(dataView, tiffOffset, dirOffset, littleEndian, tags, tagOffsets, includeTags, excludeTags) {\n    var tagsNumber, dirEndOffset, i, tagOffset, tagNumber, tagValue;\n    if (dirOffset + 6 > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid directory offset.');\n      return;\n    }\n    tagsNumber = dataView.getUint16(dirOffset, littleEndian);\n    dirEndOffset = dirOffset + 2 + 12 * tagsNumber;\n    if (dirEndOffset + 4 > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid directory size.');\n      return;\n    }\n    for (i = 0; i < tagsNumber; i += 1) {\n      tagOffset = dirOffset + 2 + 12 * i;\n      tagNumber = dataView.getUint16(tagOffset, littleEndian);\n      if (includeTags && !includeTags[tagNumber]) continue;\n      if (excludeTags && excludeTags[tagNumber] === true) continue;\n      tagValue = getExifValue(dataView, tiffOffset, tagOffset, dataView.getUint16(tagOffset + 2, littleEndian),\n      // tag type\n      dataView.getUint32(tagOffset + 4, littleEndian),\n      // tag length\n      littleEndian);\n      tags[tagNumber] = tagValue;\n      if (tagOffsets) {\n        tagOffsets[tagNumber] = tagOffset;\n      }\n    }\n    // Return the offset to the next directory:\n    return dataView.getUint32(dirEndOffset, littleEndian);\n  }\n\n  /**\n   * Parses Private IFD tags.\n   *\n   * @param {object} data Data object to store exif tags and offsets\n   * @param {number} tagCode Private IFD tag code\n   * @param {DataView} dataView Data view interface\n   * @param {number} tiffOffset TIFF offset\n   * @param {boolean} littleEndian Little endian encoding\n   * @param {object} includeTags Map of tags to include\n   * @param {object} excludeTags Map of tags to exclude\n   */\n  function parseExifPrivateIFD(data, tagCode, dataView, tiffOffset, littleEndian, includeTags, excludeTags) {\n    var dirOffset = data.exif[tagCode];\n    if (dirOffset) {\n      data.exif[tagCode] = new ExifMap(tagCode);\n      if (data.exifOffsets) {\n        data.exifOffsets[tagCode] = new ExifMap(tagCode);\n      }\n      parseExifTags(dataView, tiffOffset, tiffOffset + dirOffset, littleEndian, data.exif[tagCode], data.exifOffsets && data.exifOffsets[tagCode], includeTags && includeTags[tagCode], excludeTags && excludeTags[tagCode]);\n    }\n  }\n  loadImage.parseExifData = function (dataView, offset, length, data, options) {\n    if (options.disableExif) {\n      return;\n    }\n    var includeTags = options.includeExifTags;\n    var excludeTags = options.excludeExifTags || {\n      0x8769: {\n        // ExifIFDPointer\n        0x927c: true // MakerNote\n      }\n    };\n    var tiffOffset = offset + 10;\n    var littleEndian;\n    var dirOffset;\n    var privateIFDs;\n    // Check for the ASCII code for \"Exif\" (0x45786966):\n    if (dataView.getUint32(offset + 4) !== 0x45786966) {\n      // No Exif data, might be XMP data instead\n      return;\n    }\n    if (tiffOffset + 8 > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid segment size.');\n      return;\n    }\n    // Check for the two null bytes:\n    if (dataView.getUint16(offset + 8) !== 0x0000) {\n      console.log('Invalid Exif data: Missing byte alignment offset.');\n      return;\n    }\n    // Check the byte alignment:\n    switch (dataView.getUint16(tiffOffset)) {\n      case 0x4949:\n        littleEndian = true;\n        break;\n      case 0x4d4d:\n        littleEndian = false;\n        break;\n      default:\n        console.log('Invalid Exif data: Invalid byte alignment marker.');\n        return;\n    }\n    // Check for the TIFF tag marker (0x002A):\n    if (dataView.getUint16(tiffOffset + 2, littleEndian) !== 0x002a) {\n      console.log('Invalid Exif data: Missing TIFF marker.');\n      return;\n    }\n    // Retrieve the directory offset bytes, usually 0x00000008 or 8 decimal:\n    dirOffset = dataView.getUint32(tiffOffset + 4, littleEndian);\n    // Create the exif object to store the tags:\n    data.exif = new ExifMap();\n    if (!options.disableExifOffsets) {\n      data.exifOffsets = new ExifMap();\n      data.exifTiffOffset = tiffOffset;\n      data.exifLittleEndian = littleEndian;\n    }\n    // Parse the tags of the main image directory and retrieve the\n    // offset to the next directory, usually the thumbnail directory:\n    dirOffset = parseExifTags(dataView, tiffOffset, tiffOffset + dirOffset, littleEndian, data.exif, data.exifOffsets, includeTags, excludeTags);\n    if (dirOffset && !options.disableExifThumbnail) {\n      dirOffset = parseExifTags(dataView, tiffOffset, tiffOffset + dirOffset, littleEndian, data.exif, data.exifOffsets, includeTags, excludeTags);\n      // Check for JPEG Thumbnail offset:\n      if (data.exif[0x0201] && data.exif[0x0202]) {\n        data.exif[0x0201] = getExifThumbnail(dataView, tiffOffset + data.exif[0x0201], data.exif[0x0202] // Thumbnail data length\n        );\n      }\n    }\n    privateIFDs = Object.keys(data.exif.privateIFDs);\n    privateIFDs.forEach(function (tagCode) {\n      parseExifPrivateIFD(data, tagCode, dataView, tiffOffset, littleEndian, includeTags, excludeTags);\n    });\n  };\n\n  // Registers the Exif parser for the APP1 JPEG meta data segment:\n  loadImage.metaDataParsers.jpeg[0xffe1].push(loadImage.parseExifData);\n  loadImage.exifWriters = {\n    // Orientation writer:\n    0x0112: function (buffer, data, value) {\n      var view = new DataView(buffer, data.exifOffsets[0x0112] + 8, 2);\n      view.setUint16(0, value, data.exifLittleEndian);\n      return buffer;\n    }\n  };\n  loadImage.writeExifData = function (buffer, data, id, value) {\n    loadImage.exifWriters[data.exif.map[id]](buffer, data, value);\n  };\n  loadImage.ExifMap = ExifMap;\n\n  // Adds the following properties to the parseMetaData callback data:\n  // - exif: The parsed Exif tags\n  // - exifOffsets: The parsed Exif tag offsets\n  // - exifTiffOffset: TIFF header offset (used for offset pointers)\n  // - exifLittleEndian: little endian order if true, big endian if false\n\n  // Adds the following options to the parseMetaData method:\n  // - disableExif: Disables Exif parsing when true.\n  // - disableExifThumbnail: Disables parsing of Thumbnail data when true.\n  // - disableExifOffsets: Disables storing Exif tag offsets when true.\n  // - includeExifTags: A map of Exif tags to include for parsing.\n  // - excludeExifTags: A map of Exif tags to exclude from parsing.\n});","map":{"version":3,"names":["factory","define","amd","module","exports","require","window","loadImage","ExifMap","tagCode","Object","defineProperty","value","privateIFDs","map","tags","prototype","Orientation","Thumbnail","Exif","GPSInfo","Interoperability","name","get","id","getExifThumbnail","dataView","offset","length","byteLength","console","log","Blob","buffer","slice","type","ExifTagTypes","getValue","dataOffset","getUint8","size","String","fromCharCode","ascii","littleEndian","getUint16","getUint32","getInt32","getExifValue","tiffOffset","tagType","tagSize","values","i","str","c","parseExifTags","dirOffset","tagOffsets","includeTags","excludeTags","tagsNumber","dirEndOffset","tagOffset","tagNumber","tagValue","parseExifPrivateIFD","data","exif","exifOffsets","parseExifData","options","disableExif","includeExifTags","excludeExifTags","disableExifOffsets","exifTiffOffset","exifLittleEndian","disableExifThumbnail","keys","forEach","metaDataParsers","jpeg","push","exifWriters","view","DataView","setUint16","writeExifData"],"sources":["/Users/mac/Downloads/ai-math-helper-complete/node_modules/blueimp-load-image/js/load-image-exif.js"],"sourcesContent":["/*\n * JavaScript Load Image Exif Parser\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2013, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, module, require, DataView */\n\n/* eslint-disable no-console */\n\n;(function (factory) {\n  'use strict'\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define(['./load-image', './load-image-meta'], factory)\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./load-image'), require('./load-image-meta'))\n  } else {\n    // Browser globals:\n    factory(window.loadImage)\n  }\n})(function (loadImage) {\n  'use strict'\n\n  /**\n   * Exif tag map\n   *\n   * @name ExifMap\n   * @class\n   * @param {number} tagCode Private IFD tag code\n   */\n  function ExifMap(tagCode) {\n    if (tagCode) {\n      Object.defineProperty(this, 'map', {\n        value: this.privateIFDs[tagCode].map\n      })\n      Object.defineProperty(this, 'tags', {\n        value: (this.tags && this.tags[tagCode]) || {}\n      })\n    }\n  }\n\n  ExifMap.prototype.map = {\n    Orientation: 0x0112,\n    Thumbnail: 0x0201,\n    Exif: 0x8769,\n    GPSInfo: 0x8825,\n    Interoperability: 0xa005\n  }\n\n  ExifMap.prototype.privateIFDs = {\n    0x8769: { name: 'Exif', map: {} },\n    0x8825: { name: 'GPSInfo', map: {} },\n    0xa005: { name: 'Interoperability', map: {} }\n  }\n\n  /**\n   * Retrieves exif tag value\n   *\n   * @param {number|string} id Exif tag code or name\n   * @returns {object} Exif tag value\n   */\n  ExifMap.prototype.get = function (id) {\n    return this[id] || this[this.map[id]]\n  }\n\n  /**\n   * Returns the Exif Thumbnail data as Blob.\n   *\n   * @param {DataView} dataView Data view interface\n   * @param {number} offset Thumbnail data offset\n   * @param {number} length Thumbnail data length\n   * @returns {undefined|Blob} Returns the Thumbnail Blob or undefined\n   */\n  function getExifThumbnail(dataView, offset, length) {\n    if (!length || offset + length > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid thumbnail data.')\n      return\n    }\n    return new Blob([dataView.buffer.slice(offset, offset + length)], {\n      type: 'image/jpeg'\n    })\n  }\n\n  var ExifTagTypes = {\n    // byte, 8-bit unsigned int:\n    1: {\n      getValue: function (dataView, dataOffset) {\n        return dataView.getUint8(dataOffset)\n      },\n      size: 1\n    },\n    // ascii, 8-bit byte:\n    2: {\n      getValue: function (dataView, dataOffset) {\n        return String.fromCharCode(dataView.getUint8(dataOffset))\n      },\n      size: 1,\n      ascii: true\n    },\n    // short, 16 bit int:\n    3: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return dataView.getUint16(dataOffset, littleEndian)\n      },\n      size: 2\n    },\n    // long, 32 bit int:\n    4: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return dataView.getUint32(dataOffset, littleEndian)\n      },\n      size: 4\n    },\n    // rational = two long values, first is numerator, second is denominator:\n    5: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return (\n          dataView.getUint32(dataOffset, littleEndian) /\n          dataView.getUint32(dataOffset + 4, littleEndian)\n        )\n      },\n      size: 8\n    },\n    // slong, 32 bit signed int:\n    9: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return dataView.getInt32(dataOffset, littleEndian)\n      },\n      size: 4\n    },\n    // srational, two slongs, first is numerator, second is denominator:\n    10: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return (\n          dataView.getInt32(dataOffset, littleEndian) /\n          dataView.getInt32(dataOffset + 4, littleEndian)\n        )\n      },\n      size: 8\n    }\n  }\n  // undefined, 8-bit byte, value depending on field:\n  ExifTagTypes[7] = ExifTagTypes[1]\n\n  /**\n   * Returns Exif tag value.\n   *\n   * @param {DataView} dataView Data view interface\n   * @param {number} tiffOffset TIFF offset\n   * @param {number} offset Tag offset\n   * @param {number} type Tag type\n   * @param {number} length Tag length\n   * @param {boolean} littleEndian Little endian encoding\n   * @returns {object} Tag value\n   */\n  function getExifValue(\n    dataView,\n    tiffOffset,\n    offset,\n    type,\n    length,\n    littleEndian\n  ) {\n    var tagType = ExifTagTypes[type]\n    var tagSize\n    var dataOffset\n    var values\n    var i\n    var str\n    var c\n    if (!tagType) {\n      console.log('Invalid Exif data: Invalid tag type.')\n      return\n    }\n    tagSize = tagType.size * length\n    // Determine if the value is contained in the dataOffset bytes,\n    // or if the value at the dataOffset is a pointer to the actual data:\n    dataOffset =\n      tagSize > 4\n        ? tiffOffset + dataView.getUint32(offset + 8, littleEndian)\n        : offset + 8\n    if (dataOffset + tagSize > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid data offset.')\n      return\n    }\n    if (length === 1) {\n      return tagType.getValue(dataView, dataOffset, littleEndian)\n    }\n    values = []\n    for (i = 0; i < length; i += 1) {\n      values[i] = tagType.getValue(\n        dataView,\n        dataOffset + i * tagType.size,\n        littleEndian\n      )\n    }\n    if (tagType.ascii) {\n      str = ''\n      // Concatenate the chars:\n      for (i = 0; i < values.length; i += 1) {\n        c = values[i]\n        // Ignore the terminating NULL byte(s):\n        if (c === '\\u0000') {\n          break\n        }\n        str += c\n      }\n      return str\n    }\n    return values\n  }\n\n  /**\n   * Parses Exif tags.\n   *\n   * @param {DataView} dataView Data view interface\n   * @param {number} tiffOffset TIFF offset\n   * @param {number} dirOffset Directory offset\n   * @param {boolean} littleEndian Little endian encoding\n   * @param {ExifMap} tags Map to store parsed exif tags\n   * @param {ExifMap} tagOffsets Map to store parsed exif tag offsets\n   * @param {object} includeTags Map of tags to include\n   * @param {object} excludeTags Map of tags to exclude\n   * @returns {number} Next directory offset\n   */\n  function parseExifTags(\n    dataView,\n    tiffOffset,\n    dirOffset,\n    littleEndian,\n    tags,\n    tagOffsets,\n    includeTags,\n    excludeTags\n  ) {\n    var tagsNumber, dirEndOffset, i, tagOffset, tagNumber, tagValue\n    if (dirOffset + 6 > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid directory offset.')\n      return\n    }\n    tagsNumber = dataView.getUint16(dirOffset, littleEndian)\n    dirEndOffset = dirOffset + 2 + 12 * tagsNumber\n    if (dirEndOffset + 4 > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid directory size.')\n      return\n    }\n    for (i = 0; i < tagsNumber; i += 1) {\n      tagOffset = dirOffset + 2 + 12 * i\n      tagNumber = dataView.getUint16(tagOffset, littleEndian)\n      if (includeTags && !includeTags[tagNumber]) continue\n      if (excludeTags && excludeTags[tagNumber] === true) continue\n      tagValue = getExifValue(\n        dataView,\n        tiffOffset,\n        tagOffset,\n        dataView.getUint16(tagOffset + 2, littleEndian), // tag type\n        dataView.getUint32(tagOffset + 4, littleEndian), // tag length\n        littleEndian\n      )\n      tags[tagNumber] = tagValue\n      if (tagOffsets) {\n        tagOffsets[tagNumber] = tagOffset\n      }\n    }\n    // Return the offset to the next directory:\n    return dataView.getUint32(dirEndOffset, littleEndian)\n  }\n\n  /**\n   * Parses Private IFD tags.\n   *\n   * @param {object} data Data object to store exif tags and offsets\n   * @param {number} tagCode Private IFD tag code\n   * @param {DataView} dataView Data view interface\n   * @param {number} tiffOffset TIFF offset\n   * @param {boolean} littleEndian Little endian encoding\n   * @param {object} includeTags Map of tags to include\n   * @param {object} excludeTags Map of tags to exclude\n   */\n  function parseExifPrivateIFD(\n    data,\n    tagCode,\n    dataView,\n    tiffOffset,\n    littleEndian,\n    includeTags,\n    excludeTags\n  ) {\n    var dirOffset = data.exif[tagCode]\n    if (dirOffset) {\n      data.exif[tagCode] = new ExifMap(tagCode)\n      if (data.exifOffsets) {\n        data.exifOffsets[tagCode] = new ExifMap(tagCode)\n      }\n      parseExifTags(\n        dataView,\n        tiffOffset,\n        tiffOffset + dirOffset,\n        littleEndian,\n        data.exif[tagCode],\n        data.exifOffsets && data.exifOffsets[tagCode],\n        includeTags && includeTags[tagCode],\n        excludeTags && excludeTags[tagCode]\n      )\n    }\n  }\n\n  loadImage.parseExifData = function (dataView, offset, length, data, options) {\n    if (options.disableExif) {\n      return\n    }\n    var includeTags = options.includeExifTags\n    var excludeTags = options.excludeExifTags || {\n      0x8769: {\n        // ExifIFDPointer\n        0x927c: true // MakerNote\n      }\n    }\n    var tiffOffset = offset + 10\n    var littleEndian\n    var dirOffset\n    var privateIFDs\n    // Check for the ASCII code for \"Exif\" (0x45786966):\n    if (dataView.getUint32(offset + 4) !== 0x45786966) {\n      // No Exif data, might be XMP data instead\n      return\n    }\n    if (tiffOffset + 8 > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid segment size.')\n      return\n    }\n    // Check for the two null bytes:\n    if (dataView.getUint16(offset + 8) !== 0x0000) {\n      console.log('Invalid Exif data: Missing byte alignment offset.')\n      return\n    }\n    // Check the byte alignment:\n    switch (dataView.getUint16(tiffOffset)) {\n      case 0x4949:\n        littleEndian = true\n        break\n      case 0x4d4d:\n        littleEndian = false\n        break\n      default:\n        console.log('Invalid Exif data: Invalid byte alignment marker.')\n        return\n    }\n    // Check for the TIFF tag marker (0x002A):\n    if (dataView.getUint16(tiffOffset + 2, littleEndian) !== 0x002a) {\n      console.log('Invalid Exif data: Missing TIFF marker.')\n      return\n    }\n    // Retrieve the directory offset bytes, usually 0x00000008 or 8 decimal:\n    dirOffset = dataView.getUint32(tiffOffset + 4, littleEndian)\n    // Create the exif object to store the tags:\n    data.exif = new ExifMap()\n    if (!options.disableExifOffsets) {\n      data.exifOffsets = new ExifMap()\n      data.exifTiffOffset = tiffOffset\n      data.exifLittleEndian = littleEndian\n    }\n    // Parse the tags of the main image directory and retrieve the\n    // offset to the next directory, usually the thumbnail directory:\n    dirOffset = parseExifTags(\n      dataView,\n      tiffOffset,\n      tiffOffset + dirOffset,\n      littleEndian,\n      data.exif,\n      data.exifOffsets,\n      includeTags,\n      excludeTags\n    )\n    if (dirOffset && !options.disableExifThumbnail) {\n      dirOffset = parseExifTags(\n        dataView,\n        tiffOffset,\n        tiffOffset + dirOffset,\n        littleEndian,\n        data.exif,\n        data.exifOffsets,\n        includeTags,\n        excludeTags\n      )\n      // Check for JPEG Thumbnail offset:\n      if (data.exif[0x0201] && data.exif[0x0202]) {\n        data.exif[0x0201] = getExifThumbnail(\n          dataView,\n          tiffOffset + data.exif[0x0201],\n          data.exif[0x0202] // Thumbnail data length\n        )\n      }\n    }\n    privateIFDs = Object.keys(data.exif.privateIFDs)\n    privateIFDs.forEach(function (tagCode) {\n      parseExifPrivateIFD(\n        data,\n        tagCode,\n        dataView,\n        tiffOffset,\n        littleEndian,\n        includeTags,\n        excludeTags\n      )\n    })\n  }\n\n  // Registers the Exif parser for the APP1 JPEG meta data segment:\n  loadImage.metaDataParsers.jpeg[0xffe1].push(loadImage.parseExifData)\n\n  loadImage.exifWriters = {\n    // Orientation writer:\n    0x0112: function (buffer, data, value) {\n      var view = new DataView(buffer, data.exifOffsets[0x0112] + 8, 2)\n      view.setUint16(0, value, data.exifLittleEndian)\n      return buffer\n    }\n  }\n\n  loadImage.writeExifData = function (buffer, data, id, value) {\n    loadImage.exifWriters[data.exif.map[id]](buffer, data, value)\n  }\n\n  loadImage.ExifMap = ExifMap\n\n  // Adds the following properties to the parseMetaData callback data:\n  // - exif: The parsed Exif tags\n  // - exifOffsets: The parsed Exif tag offsets\n  // - exifTiffOffset: TIFF header offset (used for offset pointers)\n  // - exifLittleEndian: little endian order if true, big endian if false\n\n  // Adds the following options to the parseMetaData method:\n  // - disableExif: Disables Exif parsing when true.\n  // - disableExifThumbnail: Disables parsing of Thumbnail data when true.\n  // - disableExifOffsets: Disables storing Exif tag offsets when true.\n  // - includeExifTags: A map of Exif tags to include for parsing.\n  // - excludeExifTags: A map of Exif tags to exclude from parsing.\n})\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}