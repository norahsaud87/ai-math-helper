{"ast":null,"code":"/*\n * JavaScript Load Image Scaling\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, module, require */\n\n;\n(function (factory) {\n  'use strict';\n\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define(['./load-image'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./load-image'));\n  } else {\n    // Browser globals:\n    factory(window.loadImage);\n  }\n})(function (loadImage) {\n  'use strict';\n\n  var originalTransform = loadImage.transform;\n  loadImage.transform = function (img, options, callback, file, data) {\n    originalTransform.call(loadImage, loadImage.scale(img, options, data), options, callback, file, data);\n  };\n\n  // Transform image coordinates, allows to override e.g.\n  // the canvas orientation based on the orientation option,\n  // gets canvas, options passed as arguments:\n  loadImage.transformCoordinates = function () {};\n\n  // Returns transformed options, allows to override e.g.\n  // maxWidth, maxHeight and crop options based on the aspectRatio.\n  // gets img, options passed as arguments:\n  loadImage.getTransformedOptions = function (img, options) {\n    var aspectRatio = options.aspectRatio;\n    var newOptions;\n    var i;\n    var width;\n    var height;\n    if (!aspectRatio) {\n      return options;\n    }\n    newOptions = {};\n    for (i in options) {\n      if (Object.prototype.hasOwnProperty.call(options, i)) {\n        newOptions[i] = options[i];\n      }\n    }\n    newOptions.crop = true;\n    width = img.naturalWidth || img.width;\n    height = img.naturalHeight || img.height;\n    if (width / height > aspectRatio) {\n      newOptions.maxWidth = height * aspectRatio;\n      newOptions.maxHeight = height;\n    } else {\n      newOptions.maxWidth = width;\n      newOptions.maxHeight = width / aspectRatio;\n    }\n    return newOptions;\n  };\n\n  // Canvas render method, allows to implement a different rendering algorithm:\n  loadImage.renderImageToCanvas = function (canvas, img, sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, destWidth, destHeight, options) {\n    var ctx = canvas.getContext('2d');\n    if (options.imageSmoothingEnabled === false) {\n      ctx.imageSmoothingEnabled = false;\n    } else if (options.imageSmoothingQuality) {\n      ctx.imageSmoothingQuality = options.imageSmoothingQuality;\n    }\n    ctx.drawImage(img, sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, destWidth, destHeight);\n    return canvas;\n  };\n\n  // Determines if the target image should be a canvas element:\n  loadImage.hasCanvasOption = function (options) {\n    return options.canvas || options.crop || !!options.aspectRatio;\n  };\n\n  // Scales and/or crops the given image (img or canvas HTML element)\n  // using the given options.\n  // Returns a canvas object if the browser supports canvas\n  // and the hasCanvasOption method returns true or a canvas\n  // object is passed as image, else the scaled image:\n  loadImage.scale = function (img, options, data) {\n    // eslint-disable-next-line no-param-reassign\n    options = options || {};\n    var canvas = document.createElement('canvas');\n    var useCanvas = img.getContext || loadImage.hasCanvasOption(options) && canvas.getContext;\n    var width = img.naturalWidth || img.width;\n    var height = img.naturalHeight || img.height;\n    var destWidth = width;\n    var destHeight = height;\n    var maxWidth;\n    var maxHeight;\n    var minWidth;\n    var minHeight;\n    var sourceWidth;\n    var sourceHeight;\n    var sourceX;\n    var sourceY;\n    var pixelRatio;\n    var downsamplingRatio;\n    var tmp;\n    /**\n     * Scales up image dimensions\n     */\n    function scaleUp() {\n      var scale = Math.max((minWidth || destWidth) / destWidth, (minHeight || destHeight) / destHeight);\n      if (scale > 1) {\n        destWidth *= scale;\n        destHeight *= scale;\n      }\n    }\n    /**\n     * Scales down image dimensions\n     */\n    function scaleDown() {\n      var scale = Math.min((maxWidth || destWidth) / destWidth, (maxHeight || destHeight) / destHeight);\n      if (scale < 1) {\n        destWidth *= scale;\n        destHeight *= scale;\n      }\n    }\n    if (useCanvas) {\n      // eslint-disable-next-line no-param-reassign\n      options = loadImage.getTransformedOptions(img, options, data);\n      sourceX = options.left || 0;\n      sourceY = options.top || 0;\n      if (options.sourceWidth) {\n        sourceWidth = options.sourceWidth;\n        if (options.right !== undefined && options.left === undefined) {\n          sourceX = width - sourceWidth - options.right;\n        }\n      } else {\n        sourceWidth = width - sourceX - (options.right || 0);\n      }\n      if (options.sourceHeight) {\n        sourceHeight = options.sourceHeight;\n        if (options.bottom !== undefined && options.top === undefined) {\n          sourceY = height - sourceHeight - options.bottom;\n        }\n      } else {\n        sourceHeight = height - sourceY - (options.bottom || 0);\n      }\n      destWidth = sourceWidth;\n      destHeight = sourceHeight;\n    }\n    maxWidth = options.maxWidth;\n    maxHeight = options.maxHeight;\n    minWidth = options.minWidth;\n    minHeight = options.minHeight;\n    if (useCanvas && maxWidth && maxHeight && options.crop) {\n      destWidth = maxWidth;\n      destHeight = maxHeight;\n      tmp = sourceWidth / sourceHeight - maxWidth / maxHeight;\n      if (tmp < 0) {\n        sourceHeight = maxHeight * sourceWidth / maxWidth;\n        if (options.top === undefined && options.bottom === undefined) {\n          sourceY = (height - sourceHeight) / 2;\n        }\n      } else if (tmp > 0) {\n        sourceWidth = maxWidth * sourceHeight / maxHeight;\n        if (options.left === undefined && options.right === undefined) {\n          sourceX = (width - sourceWidth) / 2;\n        }\n      }\n    } else {\n      if (options.contain || options.cover) {\n        minWidth = maxWidth = maxWidth || minWidth;\n        minHeight = maxHeight = maxHeight || minHeight;\n      }\n      if (options.cover) {\n        scaleDown();\n        scaleUp();\n      } else {\n        scaleUp();\n        scaleDown();\n      }\n    }\n    if (useCanvas) {\n      pixelRatio = options.pixelRatio;\n      if (pixelRatio > 1) {\n        canvas.style.width = destWidth + 'px';\n        canvas.style.height = destHeight + 'px';\n        destWidth *= pixelRatio;\n        destHeight *= pixelRatio;\n        canvas.getContext('2d').scale(pixelRatio, pixelRatio);\n      }\n      downsamplingRatio = options.downsamplingRatio;\n      if (downsamplingRatio > 0 && downsamplingRatio < 1 && destWidth < sourceWidth && destHeight < sourceHeight) {\n        while (sourceWidth * downsamplingRatio > destWidth) {\n          canvas.width = sourceWidth * downsamplingRatio;\n          canvas.height = sourceHeight * downsamplingRatio;\n          loadImage.renderImageToCanvas(canvas, img, sourceX, sourceY, sourceWidth, sourceHeight, 0, 0, canvas.width, canvas.height, options);\n          sourceX = 0;\n          sourceY = 0;\n          sourceWidth = canvas.width;\n          sourceHeight = canvas.height;\n          // eslint-disable-next-line no-param-reassign\n          img = document.createElement('canvas');\n          img.width = sourceWidth;\n          img.height = sourceHeight;\n          loadImage.renderImageToCanvas(img, canvas, 0, 0, sourceWidth, sourceHeight, 0, 0, sourceWidth, sourceHeight, options);\n        }\n      }\n      canvas.width = destWidth;\n      canvas.height = destHeight;\n      loadImage.transformCoordinates(canvas, options);\n      return loadImage.renderImageToCanvas(canvas, img, sourceX, sourceY, sourceWidth, sourceHeight, 0, 0, destWidth, destHeight, options);\n    }\n    img.width = destWidth;\n    img.height = destHeight;\n    return img;\n  };\n});","map":{"version":3,"names":["factory","define","amd","module","exports","require","window","loadImage","originalTransform","transform","img","options","callback","file","data","call","scale","transformCoordinates","getTransformedOptions","aspectRatio","newOptions","i","width","height","Object","prototype","hasOwnProperty","crop","naturalWidth","naturalHeight","maxWidth","maxHeight","renderImageToCanvas","canvas","sourceX","sourceY","sourceWidth","sourceHeight","destX","destY","destWidth","destHeight","ctx","getContext","imageSmoothingEnabled","imageSmoothingQuality","drawImage","hasCanvasOption","document","createElement","useCanvas","minWidth","minHeight","pixelRatio","downsamplingRatio","tmp","scaleUp","Math","max","scaleDown","min","left","top","right","undefined","bottom","contain","cover","style"],"sources":["/Users/mac/Downloads/ai-math-helper-complete/node_modules/blueimp-load-image/js/load-image-scale.js"],"sourcesContent":["/*\n * JavaScript Load Image Scaling\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, module, require */\n\n;(function (factory) {\n  'use strict'\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define(['./load-image'], factory)\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./load-image'))\n  } else {\n    // Browser globals:\n    factory(window.loadImage)\n  }\n})(function (loadImage) {\n  'use strict'\n\n  var originalTransform = loadImage.transform\n\n  loadImage.transform = function (img, options, callback, file, data) {\n    originalTransform.call(\n      loadImage,\n      loadImage.scale(img, options, data),\n      options,\n      callback,\n      file,\n      data\n    )\n  }\n\n  // Transform image coordinates, allows to override e.g.\n  // the canvas orientation based on the orientation option,\n  // gets canvas, options passed as arguments:\n  loadImage.transformCoordinates = function () {}\n\n  // Returns transformed options, allows to override e.g.\n  // maxWidth, maxHeight and crop options based on the aspectRatio.\n  // gets img, options passed as arguments:\n  loadImage.getTransformedOptions = function (img, options) {\n    var aspectRatio = options.aspectRatio\n    var newOptions\n    var i\n    var width\n    var height\n    if (!aspectRatio) {\n      return options\n    }\n    newOptions = {}\n    for (i in options) {\n      if (Object.prototype.hasOwnProperty.call(options, i)) {\n        newOptions[i] = options[i]\n      }\n    }\n    newOptions.crop = true\n    width = img.naturalWidth || img.width\n    height = img.naturalHeight || img.height\n    if (width / height > aspectRatio) {\n      newOptions.maxWidth = height * aspectRatio\n      newOptions.maxHeight = height\n    } else {\n      newOptions.maxWidth = width\n      newOptions.maxHeight = width / aspectRatio\n    }\n    return newOptions\n  }\n\n  // Canvas render method, allows to implement a different rendering algorithm:\n  loadImage.renderImageToCanvas = function (\n    canvas,\n    img,\n    sourceX,\n    sourceY,\n    sourceWidth,\n    sourceHeight,\n    destX,\n    destY,\n    destWidth,\n    destHeight,\n    options\n  ) {\n    var ctx = canvas.getContext('2d')\n    if (options.imageSmoothingEnabled === false) {\n      ctx.imageSmoothingEnabled = false\n    } else if (options.imageSmoothingQuality) {\n      ctx.imageSmoothingQuality = options.imageSmoothingQuality\n    }\n    ctx.drawImage(\n      img,\n      sourceX,\n      sourceY,\n      sourceWidth,\n      sourceHeight,\n      destX,\n      destY,\n      destWidth,\n      destHeight\n    )\n    return canvas\n  }\n\n  // Determines if the target image should be a canvas element:\n  loadImage.hasCanvasOption = function (options) {\n    return options.canvas || options.crop || !!options.aspectRatio\n  }\n\n  // Scales and/or crops the given image (img or canvas HTML element)\n  // using the given options.\n  // Returns a canvas object if the browser supports canvas\n  // and the hasCanvasOption method returns true or a canvas\n  // object is passed as image, else the scaled image:\n  loadImage.scale = function (img, options, data) {\n    // eslint-disable-next-line no-param-reassign\n    options = options || {}\n    var canvas = document.createElement('canvas')\n    var useCanvas =\n      img.getContext ||\n      (loadImage.hasCanvasOption(options) && canvas.getContext)\n    var width = img.naturalWidth || img.width\n    var height = img.naturalHeight || img.height\n    var destWidth = width\n    var destHeight = height\n    var maxWidth\n    var maxHeight\n    var minWidth\n    var minHeight\n    var sourceWidth\n    var sourceHeight\n    var sourceX\n    var sourceY\n    var pixelRatio\n    var downsamplingRatio\n    var tmp\n    /**\n     * Scales up image dimensions\n     */\n    function scaleUp() {\n      var scale = Math.max(\n        (minWidth || destWidth) / destWidth,\n        (minHeight || destHeight) / destHeight\n      )\n      if (scale > 1) {\n        destWidth *= scale\n        destHeight *= scale\n      }\n    }\n    /**\n     * Scales down image dimensions\n     */\n    function scaleDown() {\n      var scale = Math.min(\n        (maxWidth || destWidth) / destWidth,\n        (maxHeight || destHeight) / destHeight\n      )\n      if (scale < 1) {\n        destWidth *= scale\n        destHeight *= scale\n      }\n    }\n    if (useCanvas) {\n      // eslint-disable-next-line no-param-reassign\n      options = loadImage.getTransformedOptions(img, options, data)\n      sourceX = options.left || 0\n      sourceY = options.top || 0\n      if (options.sourceWidth) {\n        sourceWidth = options.sourceWidth\n        if (options.right !== undefined && options.left === undefined) {\n          sourceX = width - sourceWidth - options.right\n        }\n      } else {\n        sourceWidth = width - sourceX - (options.right || 0)\n      }\n      if (options.sourceHeight) {\n        sourceHeight = options.sourceHeight\n        if (options.bottom !== undefined && options.top === undefined) {\n          sourceY = height - sourceHeight - options.bottom\n        }\n      } else {\n        sourceHeight = height - sourceY - (options.bottom || 0)\n      }\n      destWidth = sourceWidth\n      destHeight = sourceHeight\n    }\n    maxWidth = options.maxWidth\n    maxHeight = options.maxHeight\n    minWidth = options.minWidth\n    minHeight = options.minHeight\n    if (useCanvas && maxWidth && maxHeight && options.crop) {\n      destWidth = maxWidth\n      destHeight = maxHeight\n      tmp = sourceWidth / sourceHeight - maxWidth / maxHeight\n      if (tmp < 0) {\n        sourceHeight = (maxHeight * sourceWidth) / maxWidth\n        if (options.top === undefined && options.bottom === undefined) {\n          sourceY = (height - sourceHeight) / 2\n        }\n      } else if (tmp > 0) {\n        sourceWidth = (maxWidth * sourceHeight) / maxHeight\n        if (options.left === undefined && options.right === undefined) {\n          sourceX = (width - sourceWidth) / 2\n        }\n      }\n    } else {\n      if (options.contain || options.cover) {\n        minWidth = maxWidth = maxWidth || minWidth\n        minHeight = maxHeight = maxHeight || minHeight\n      }\n      if (options.cover) {\n        scaleDown()\n        scaleUp()\n      } else {\n        scaleUp()\n        scaleDown()\n      }\n    }\n    if (useCanvas) {\n      pixelRatio = options.pixelRatio\n      if (pixelRatio > 1) {\n        canvas.style.width = destWidth + 'px'\n        canvas.style.height = destHeight + 'px'\n        destWidth *= pixelRatio\n        destHeight *= pixelRatio\n        canvas.getContext('2d').scale(pixelRatio, pixelRatio)\n      }\n      downsamplingRatio = options.downsamplingRatio\n      if (\n        downsamplingRatio > 0 &&\n        downsamplingRatio < 1 &&\n        destWidth < sourceWidth &&\n        destHeight < sourceHeight\n      ) {\n        while (sourceWidth * downsamplingRatio > destWidth) {\n          canvas.width = sourceWidth * downsamplingRatio\n          canvas.height = sourceHeight * downsamplingRatio\n          loadImage.renderImageToCanvas(\n            canvas,\n            img,\n            sourceX,\n            sourceY,\n            sourceWidth,\n            sourceHeight,\n            0,\n            0,\n            canvas.width,\n            canvas.height,\n            options\n          )\n          sourceX = 0\n          sourceY = 0\n          sourceWidth = canvas.width\n          sourceHeight = canvas.height\n          // eslint-disable-next-line no-param-reassign\n          img = document.createElement('canvas')\n          img.width = sourceWidth\n          img.height = sourceHeight\n          loadImage.renderImageToCanvas(\n            img,\n            canvas,\n            0,\n            0,\n            sourceWidth,\n            sourceHeight,\n            0,\n            0,\n            sourceWidth,\n            sourceHeight,\n            options\n          )\n        }\n      }\n      canvas.width = destWidth\n      canvas.height = destHeight\n      loadImage.transformCoordinates(canvas, options)\n      return loadImage.renderImageToCanvas(\n        canvas,\n        img,\n        sourceX,\n        sourceY,\n        sourceWidth,\n        sourceHeight,\n        0,\n        0,\n        destWidth,\n        destHeight,\n        options\n      )\n    }\n    img.width = destWidth\n    img.height = destHeight\n    return img\n  }\n})\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AAAC,CAAC,UAAUA,OAAO,EAAE;EACnB,YAAY;;EACZ,IAAI,OAAOC,MAAM,KAAK,UAAU,IAAIA,MAAM,CAACC,GAAG,EAAE;IAC9C;IACAD,MAAM,CAAC,CAAC,cAAc,CAAC,EAAED,OAAO,CAAC;EACnC,CAAC,MAAM,IAAI,OAAOG,MAAM,KAAK,QAAQ,IAAIA,MAAM,CAACC,OAAO,EAAE;IACvDJ,OAAO,CAACK,OAAO,CAAC,cAAc,CAAC,CAAC;EAClC,CAAC,MAAM;IACL;IACAL,OAAO,CAACM,MAAM,CAACC,SAAS,CAAC;EAC3B;AACF,CAAC,EAAE,UAAUA,SAAS,EAAE;EACtB,YAAY;;EAEZ,IAAIC,iBAAiB,GAAGD,SAAS,CAACE,SAAS;EAE3CF,SAAS,CAACE,SAAS,GAAG,UAAUC,GAAG,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,IAAI,EAAE;IAClEN,iBAAiB,CAACO,IAAI,CACpBR,SAAS,EACTA,SAAS,CAACS,KAAK,CAACN,GAAG,EAAEC,OAAO,EAAEG,IAAI,CAAC,EACnCH,OAAO,EACPC,QAAQ,EACRC,IAAI,EACJC,IACF,CAAC;EACH,CAAC;;EAED;EACA;EACA;EACAP,SAAS,CAACU,oBAAoB,GAAG,YAAY,CAAC,CAAC;;EAE/C;EACA;EACA;EACAV,SAAS,CAACW,qBAAqB,GAAG,UAAUR,GAAG,EAAEC,OAAO,EAAE;IACxD,IAAIQ,WAAW,GAAGR,OAAO,CAACQ,WAAW;IACrC,IAAIC,UAAU;IACd,IAAIC,CAAC;IACL,IAAIC,KAAK;IACT,IAAIC,MAAM;IACV,IAAI,CAACJ,WAAW,EAAE;MAChB,OAAOR,OAAO;IAChB;IACAS,UAAU,GAAG,CAAC,CAAC;IACf,KAAKC,CAAC,IAAIV,OAAO,EAAE;MACjB,IAAIa,MAAM,CAACC,SAAS,CAACC,cAAc,CAACX,IAAI,CAACJ,OAAO,EAAEU,CAAC,CAAC,EAAE;QACpDD,UAAU,CAACC,CAAC,CAAC,GAAGV,OAAO,CAACU,CAAC,CAAC;MAC5B;IACF;IACAD,UAAU,CAACO,IAAI,GAAG,IAAI;IACtBL,KAAK,GAAGZ,GAAG,CAACkB,YAAY,IAAIlB,GAAG,CAACY,KAAK;IACrCC,MAAM,GAAGb,GAAG,CAACmB,aAAa,IAAInB,GAAG,CAACa,MAAM;IACxC,IAAID,KAAK,GAAGC,MAAM,GAAGJ,WAAW,EAAE;MAChCC,UAAU,CAACU,QAAQ,GAAGP,MAAM,GAAGJ,WAAW;MAC1CC,UAAU,CAACW,SAAS,GAAGR,MAAM;IAC/B,CAAC,MAAM;MACLH,UAAU,CAACU,QAAQ,GAAGR,KAAK;MAC3BF,UAAU,CAACW,SAAS,GAAGT,KAAK,GAAGH,WAAW;IAC5C;IACA,OAAOC,UAAU;EACnB,CAAC;;EAED;EACAb,SAAS,CAACyB,mBAAmB,GAAG,UAC9BC,MAAM,EACNvB,GAAG,EACHwB,OAAO,EACPC,OAAO,EACPC,WAAW,EACXC,YAAY,EACZC,KAAK,EACLC,KAAK,EACLC,SAAS,EACTC,UAAU,EACV9B,OAAO,EACP;IACA,IAAI+B,GAAG,GAAGT,MAAM,CAACU,UAAU,CAAC,IAAI,CAAC;IACjC,IAAIhC,OAAO,CAACiC,qBAAqB,KAAK,KAAK,EAAE;MAC3CF,GAAG,CAACE,qBAAqB,GAAG,KAAK;IACnC,CAAC,MAAM,IAAIjC,OAAO,CAACkC,qBAAqB,EAAE;MACxCH,GAAG,CAACG,qBAAqB,GAAGlC,OAAO,CAACkC,qBAAqB;IAC3D;IACAH,GAAG,CAACI,SAAS,CACXpC,GAAG,EACHwB,OAAO,EACPC,OAAO,EACPC,WAAW,EACXC,YAAY,EACZC,KAAK,EACLC,KAAK,EACLC,SAAS,EACTC,UACF,CAAC;IACD,OAAOR,MAAM;EACf,CAAC;;EAED;EACA1B,SAAS,CAACwC,eAAe,GAAG,UAAUpC,OAAO,EAAE;IAC7C,OAAOA,OAAO,CAACsB,MAAM,IAAItB,OAAO,CAACgB,IAAI,IAAI,CAAC,CAAChB,OAAO,CAACQ,WAAW;EAChE,CAAC;;EAED;EACA;EACA;EACA;EACA;EACAZ,SAAS,CAACS,KAAK,GAAG,UAAUN,GAAG,EAAEC,OAAO,EAAEG,IAAI,EAAE;IAC9C;IACAH,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvB,IAAIsB,MAAM,GAAGe,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;IAC7C,IAAIC,SAAS,GACXxC,GAAG,CAACiC,UAAU,IACbpC,SAAS,CAACwC,eAAe,CAACpC,OAAO,CAAC,IAAIsB,MAAM,CAACU,UAAW;IAC3D,IAAIrB,KAAK,GAAGZ,GAAG,CAACkB,YAAY,IAAIlB,GAAG,CAACY,KAAK;IACzC,IAAIC,MAAM,GAAGb,GAAG,CAACmB,aAAa,IAAInB,GAAG,CAACa,MAAM;IAC5C,IAAIiB,SAAS,GAAGlB,KAAK;IACrB,IAAImB,UAAU,GAAGlB,MAAM;IACvB,IAAIO,QAAQ;IACZ,IAAIC,SAAS;IACb,IAAIoB,QAAQ;IACZ,IAAIC,SAAS;IACb,IAAIhB,WAAW;IACf,IAAIC,YAAY;IAChB,IAAIH,OAAO;IACX,IAAIC,OAAO;IACX,IAAIkB,UAAU;IACd,IAAIC,iBAAiB;IACrB,IAAIC,GAAG;IACP;AACJ;AACA;IACI,SAASC,OAAOA,CAAA,EAAG;MACjB,IAAIxC,KAAK,GAAGyC,IAAI,CAACC,GAAG,CAClB,CAACP,QAAQ,IAAIX,SAAS,IAAIA,SAAS,EACnC,CAACY,SAAS,IAAIX,UAAU,IAAIA,UAC9B,CAAC;MACD,IAAIzB,KAAK,GAAG,CAAC,EAAE;QACbwB,SAAS,IAAIxB,KAAK;QAClByB,UAAU,IAAIzB,KAAK;MACrB;IACF;IACA;AACJ;AACA;IACI,SAAS2C,SAASA,CAAA,EAAG;MACnB,IAAI3C,KAAK,GAAGyC,IAAI,CAACG,GAAG,CAClB,CAAC9B,QAAQ,IAAIU,SAAS,IAAIA,SAAS,EACnC,CAACT,SAAS,IAAIU,UAAU,IAAIA,UAC9B,CAAC;MACD,IAAIzB,KAAK,GAAG,CAAC,EAAE;QACbwB,SAAS,IAAIxB,KAAK;QAClByB,UAAU,IAAIzB,KAAK;MACrB;IACF;IACA,IAAIkC,SAAS,EAAE;MACb;MACAvC,OAAO,GAAGJ,SAAS,CAACW,qBAAqB,CAACR,GAAG,EAAEC,OAAO,EAAEG,IAAI,CAAC;MAC7DoB,OAAO,GAAGvB,OAAO,CAACkD,IAAI,IAAI,CAAC;MAC3B1B,OAAO,GAAGxB,OAAO,CAACmD,GAAG,IAAI,CAAC;MAC1B,IAAInD,OAAO,CAACyB,WAAW,EAAE;QACvBA,WAAW,GAAGzB,OAAO,CAACyB,WAAW;QACjC,IAAIzB,OAAO,CAACoD,KAAK,KAAKC,SAAS,IAAIrD,OAAO,CAACkD,IAAI,KAAKG,SAAS,EAAE;UAC7D9B,OAAO,GAAGZ,KAAK,GAAGc,WAAW,GAAGzB,OAAO,CAACoD,KAAK;QAC/C;MACF,CAAC,MAAM;QACL3B,WAAW,GAAGd,KAAK,GAAGY,OAAO,IAAIvB,OAAO,CAACoD,KAAK,IAAI,CAAC,CAAC;MACtD;MACA,IAAIpD,OAAO,CAAC0B,YAAY,EAAE;QACxBA,YAAY,GAAG1B,OAAO,CAAC0B,YAAY;QACnC,IAAI1B,OAAO,CAACsD,MAAM,KAAKD,SAAS,IAAIrD,OAAO,CAACmD,GAAG,KAAKE,SAAS,EAAE;UAC7D7B,OAAO,GAAGZ,MAAM,GAAGc,YAAY,GAAG1B,OAAO,CAACsD,MAAM;QAClD;MACF,CAAC,MAAM;QACL5B,YAAY,GAAGd,MAAM,GAAGY,OAAO,IAAIxB,OAAO,CAACsD,MAAM,IAAI,CAAC,CAAC;MACzD;MACAzB,SAAS,GAAGJ,WAAW;MACvBK,UAAU,GAAGJ,YAAY;IAC3B;IACAP,QAAQ,GAAGnB,OAAO,CAACmB,QAAQ;IAC3BC,SAAS,GAAGpB,OAAO,CAACoB,SAAS;IAC7BoB,QAAQ,GAAGxC,OAAO,CAACwC,QAAQ;IAC3BC,SAAS,GAAGzC,OAAO,CAACyC,SAAS;IAC7B,IAAIF,SAAS,IAAIpB,QAAQ,IAAIC,SAAS,IAAIpB,OAAO,CAACgB,IAAI,EAAE;MACtDa,SAAS,GAAGV,QAAQ;MACpBW,UAAU,GAAGV,SAAS;MACtBwB,GAAG,GAAGnB,WAAW,GAAGC,YAAY,GAAGP,QAAQ,GAAGC,SAAS;MACvD,IAAIwB,GAAG,GAAG,CAAC,EAAE;QACXlB,YAAY,GAAIN,SAAS,GAAGK,WAAW,GAAIN,QAAQ;QACnD,IAAInB,OAAO,CAACmD,GAAG,KAAKE,SAAS,IAAIrD,OAAO,CAACsD,MAAM,KAAKD,SAAS,EAAE;UAC7D7B,OAAO,GAAG,CAACZ,MAAM,GAAGc,YAAY,IAAI,CAAC;QACvC;MACF,CAAC,MAAM,IAAIkB,GAAG,GAAG,CAAC,EAAE;QAClBnB,WAAW,GAAIN,QAAQ,GAAGO,YAAY,GAAIN,SAAS;QACnD,IAAIpB,OAAO,CAACkD,IAAI,KAAKG,SAAS,IAAIrD,OAAO,CAACoD,KAAK,KAAKC,SAAS,EAAE;UAC7D9B,OAAO,GAAG,CAACZ,KAAK,GAAGc,WAAW,IAAI,CAAC;QACrC;MACF;IACF,CAAC,MAAM;MACL,IAAIzB,OAAO,CAACuD,OAAO,IAAIvD,OAAO,CAACwD,KAAK,EAAE;QACpChB,QAAQ,GAAGrB,QAAQ,GAAGA,QAAQ,IAAIqB,QAAQ;QAC1CC,SAAS,GAAGrB,SAAS,GAAGA,SAAS,IAAIqB,SAAS;MAChD;MACA,IAAIzC,OAAO,CAACwD,KAAK,EAAE;QACjBR,SAAS,CAAC,CAAC;QACXH,OAAO,CAAC,CAAC;MACX,CAAC,MAAM;QACLA,OAAO,CAAC,CAAC;QACTG,SAAS,CAAC,CAAC;MACb;IACF;IACA,IAAIT,SAAS,EAAE;MACbG,UAAU,GAAG1C,OAAO,CAAC0C,UAAU;MAC/B,IAAIA,UAAU,GAAG,CAAC,EAAE;QAClBpB,MAAM,CAACmC,KAAK,CAAC9C,KAAK,GAAGkB,SAAS,GAAG,IAAI;QACrCP,MAAM,CAACmC,KAAK,CAAC7C,MAAM,GAAGkB,UAAU,GAAG,IAAI;QACvCD,SAAS,IAAIa,UAAU;QACvBZ,UAAU,IAAIY,UAAU;QACxBpB,MAAM,CAACU,UAAU,CAAC,IAAI,CAAC,CAAC3B,KAAK,CAACqC,UAAU,EAAEA,UAAU,CAAC;MACvD;MACAC,iBAAiB,GAAG3C,OAAO,CAAC2C,iBAAiB;MAC7C,IACEA,iBAAiB,GAAG,CAAC,IACrBA,iBAAiB,GAAG,CAAC,IACrBd,SAAS,GAAGJ,WAAW,IACvBK,UAAU,GAAGJ,YAAY,EACzB;QACA,OAAOD,WAAW,GAAGkB,iBAAiB,GAAGd,SAAS,EAAE;UAClDP,MAAM,CAACX,KAAK,GAAGc,WAAW,GAAGkB,iBAAiB;UAC9CrB,MAAM,CAACV,MAAM,GAAGc,YAAY,GAAGiB,iBAAiB;UAChD/C,SAAS,CAACyB,mBAAmB,CAC3BC,MAAM,EACNvB,GAAG,EACHwB,OAAO,EACPC,OAAO,EACPC,WAAW,EACXC,YAAY,EACZ,CAAC,EACD,CAAC,EACDJ,MAAM,CAACX,KAAK,EACZW,MAAM,CAACV,MAAM,EACbZ,OACF,CAAC;UACDuB,OAAO,GAAG,CAAC;UACXC,OAAO,GAAG,CAAC;UACXC,WAAW,GAAGH,MAAM,CAACX,KAAK;UAC1Be,YAAY,GAAGJ,MAAM,CAACV,MAAM;UAC5B;UACAb,GAAG,GAAGsC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;UACtCvC,GAAG,CAACY,KAAK,GAAGc,WAAW;UACvB1B,GAAG,CAACa,MAAM,GAAGc,YAAY;UACzB9B,SAAS,CAACyB,mBAAmB,CAC3BtB,GAAG,EACHuB,MAAM,EACN,CAAC,EACD,CAAC,EACDG,WAAW,EACXC,YAAY,EACZ,CAAC,EACD,CAAC,EACDD,WAAW,EACXC,YAAY,EACZ1B,OACF,CAAC;QACH;MACF;MACAsB,MAAM,CAACX,KAAK,GAAGkB,SAAS;MACxBP,MAAM,CAACV,MAAM,GAAGkB,UAAU;MAC1BlC,SAAS,CAACU,oBAAoB,CAACgB,MAAM,EAAEtB,OAAO,CAAC;MAC/C,OAAOJ,SAAS,CAACyB,mBAAmB,CAClCC,MAAM,EACNvB,GAAG,EACHwB,OAAO,EACPC,OAAO,EACPC,WAAW,EACXC,YAAY,EACZ,CAAC,EACD,CAAC,EACDG,SAAS,EACTC,UAAU,EACV9B,OACF,CAAC;IACH;IACAD,GAAG,CAACY,KAAK,GAAGkB,SAAS;IACrB9B,GAAG,CAACa,MAAM,GAAGkB,UAAU;IACvB,OAAO/B,GAAG;EACZ,CAAC;AACH,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}